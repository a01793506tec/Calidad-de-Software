# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KbldBrWhFaS-k5zPsZw2h6TExhx70deT
"""

import argparse
import time

#Funcion para cargar archivo
def procesar_archivo():
    """
     Funcion para cargar archivo
    """
    try:
        with open('FileWithData.txt', 'r', encoding='utf-8') as archivo_t:
            lineas = archivo_t.readlines()
            lineas_sin_nl = [linea.strip() for linea in lineas]
    except FileNotFoundError:
        print("El archivo no se encontró.")
    except IOError:
        print("Error al abrir el archivo.")
    return lineas_sin_nl
#Funcion para validar dato numerico
def es_numerico(elemento_t):
    """    Funcion para validar si el elemento es numerico"""  
    try:
        if float(elemento_t):
            return True
        if elemento_t == "0":
            return True
    except ValueError:
        return False
    return False

if __name__ == "__main__":
    inicio = time.time()
    with open('StatisticsResults.txt', 'w', encoding='utf-8') as archivo:
        parser = argparse.ArgumentParser(description='Procesar un archivo de texto.')
        parser.add_argument('archivo', help='Ruta del archivo de texto a procesar')
        args = parser.parse_args()

        lineas_sin_nueva_linea = procesar_archivo()

        numeros = []

        for elemento in lineas_sin_nueva_linea:
            VALOR_ELEMENTO = es_numerico(elemento)
            if VALOR_ELEMENTO:
                numeros.append(elemento)
            else:
                CARACTERES_NUMERICOS = ''.join(c for c in elemento if c.isdigit() or c == '.')
                if  CARACTERES_NUMERICOS.replace('.', '', 1).isdigit():
                    print(f"{elemento} no es numérico, se convierte a ", CARACTERES_NUMERICOS)
                    numeros.append(CARACTERES_NUMERICOS)
                    archivo.write(f"{elemento} no numérico, se convierte {CARACTERES_NUMERICOS}\n")
                else:
                    print(f"{elemento} no es numérico")
                    archivo.write(f"{elemento} no es numérico\n")

        numeros = [float(num) for num in numeros]
        SUMA_NUMEROS = 0
        TOTAL = 0

        for numero in numeros:
            SUMA_NUMEROS += numero
            TOTAL += 1

        media = SUMA_NUMEROS / TOTAL

        print("El total de elementos es:", TOTAL)
        archivo.write(f"l total de elementos es:{TOTAL}\n")
        print("La media de los números en la lista es:", media)
        archivo.write(f"La media de los números en la lista es:{media}\n")

        numeros_ordenados = sorted(numeros)

        if TOTAL % 2 == 0:
            mediana = (numeros_ordenados[TOTAL // 2 - 1] + numeros_ordenados[TOTAL // 2]) / 2
        else:
            mediana = numeros_ordenados[TOTAL // 2]

        print("La mediana de la lista es:", mediana)
        archivo.write(f"La mediana de los números en la lista es:{mediana}\n")

        contador = {}

        for num in numeros:
            if num in contador:
                contador[num] += 1
            else:
                contador[num] = 1

        max_frecuencia = max(contador.values())
        moda = [num for num, frecuencia in contador.items() if frecuencia == max_frecuencia]

        print("La moda de la lista es:", moda)
        print("Con una frecuencia de:", max_frecuencia)
        archivo.write(f"La moda de los números es:{moda} con una frecuencia de {max_frecuencia}\n")

        suma_cuadrados_diferencias = sum((x - media) ** 2 for x in numeros)
        varianza_poblacional = suma_cuadrados_diferencias / TOTAL

        print("La varianza poblacional es:", varianza_poblacional)
        archivo.write(f"La varianza poblacional es:{varianza_poblacional}\n")
        desviacion_estandar_poblacional = varianza_poblacional ** 0.5
        print("La desviación estándar poblacional es:", desviacion_estandar_poblacional)
        archivo.write(f"La desviación estándar poblacional es:{desviacion_estandar_poblacional}\n")

        fin = time.time()
        tiempo_total = fin - inicio

        print("El tiempo de ejecución fue de:", tiempo_total, "segundos")
        archivo.write(f"El tiempo de ejecución fue de:{tiempo_total}")
